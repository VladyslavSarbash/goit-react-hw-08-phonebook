{"version":3,"sources":["components/Redux/Contact/contact-operation.js","components/Redux/Contact/contact-reducer.js","components/Redux/Filter/filter-action.js","components/Redux/Filter/filter-reducer.js","components/Redux/Loader/loader-reducer.js","components/Redux/store.js","components/Redux/contacts-selectors.js","components/ContactList/renderContactList.js","components/Loader/loader.js","components/Filter/filter.js","components/ContactForm/contactForm.js","App.js","index.js"],"names":["getContacts","createAsyncThunk","a","axios","get","data","addContact","contact","post","deleteContact","id","delete","contactsReducer","createReducer","fulfilled","_","action","payload","state","filter","i","filterAction","createAction","filterReducer","loaderReducer","pending","rejected","rootReducer","combineReducers","contacts","loader","store","configureStore","reducer","getAllContacts","filterValue","getLoader","filterContacts","createSelector","lowerValue","toLowerCase","name","includes","connect","dispatch","type","color","height","width","timeout","length","map","number","className","onClick","target","value","pattern","onChange","useState","setState","useEffect","newContact","newObj","shortid","generate","formInput","reset","onSubmit","e","preventDefault","find","alert","placeholder","title","required","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27291ebe.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// import {\r\n//   contactAddError,\r\n//   contactAddSuccess,\r\n//   contactAddRequest,\r\n//   getContactsSuccess,\r\n//   getContactsRequest,\r\n//   getContactsError,\r\n//   contactDeleteError,\r\n//   contactDeleteRequest,\r\n//   contactDeleteSuccess,\r\n// } from './contact-action';\r\n\r\nconst getContacts = createAsyncThunk('getContacts', async () => {\r\n  const { data } = await axios.get('http://localhost:3000/contacts');\r\n  return data;\r\n});\r\n\r\nconst addContact = createAsyncThunk('addContact', async contact => {\r\n  await axios.post('http://localhost:3000/contacts', contact);\r\n  return contact;\r\n});\r\n\r\nconst deleteContact = createAsyncThunk('deleteContact', async id => {\r\n  axios.delete(`http://localhost:3000/contacts/${id}`);\r\n  return id;\r\n});\r\n\r\nexport { addContact, deleteContact, getContacts };\r\n\r\n// const getContacts = () => async dispatch => {\r\n//   dispatch(getContactsRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.get('http://localhost:3000/contacts');\r\n//     dispatch(getContactsSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(getContactsError(error));\r\n//   }\r\n// };\r\n\r\n// const addContact = contact => async dispatch => {\r\n//   dispatch(contactAddRequest());\r\n\r\n//   try {\r\n//     await axios.post('http://localhost:3000/contacts', contact);\r\n//     dispatch(contactAddSuccess(contact));\r\n//   } catch (error) {\r\n//     dispatch(contactAddError(error));\r\n//   }\r\n// };\r\n\r\n// const deleteContact = id => async dispatch => {\r\n//   dispatch(contactDeleteRequest());\r\n\r\n//   try {\r\n//     axios.delete(`http://localhost:3000/contacts/${id}`);\r\n//     dispatch(contactDeleteSuccess(id));\r\n//   } catch (error) {\r\n//     dispatch(contactDeleteError(error));\r\n//   }\r\n// };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n// import {\r\n//   contactAddSuccess,\r\n//   getContactsSuccess,\r\n//   contactDeleteSuccess,\r\n// } from './contact-action';\r\nimport { getContacts, addContact, deleteContact } from './contact-operation';\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [getContacts.fulfilled]: (_, action) => action.payload,\r\n  [addContact.fulfilled]: (state, action) => [action.payload, ...state],\r\n  [deleteContact.fulfilled]: (state, action) =>\r\n    state.filter(i => i.id !== action.payload),\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const filterAction = createAction('filter');\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { filterAction } from './filter-action';\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterAction]: (_, action) => action.payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContact,\r\n  deleteContact,\r\n  getContacts,\r\n} from '../Contact/contact-operation';\r\n// import {\r\n//   contactAddSuccess,\r\n//   contactAddRequest,\r\n//   contactAddError,\r\n//   getContactsSuccess,\r\n//   getContactsRequest,\r\n//   getContactsError,\r\n//   contactDeleteSuccess,\r\n//   contactDeleteRequest,\r\n//   contactDeleteError,\r\n// } from '../Contact/contact-action';\r\n\r\nexport const loaderReducer = createReducer(false, {\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n  [getContacts.pending]: () => true,\r\n  [getContacts.fulfilled]: () => false,\r\n  [getContacts.rejected]: () => false,\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n});\r\n\r\n// export const loaderReducer = createReducer(false, {\r\n//   [contactAddRequest]: () => true,\r\n//   [contactAddSuccess]: () => false,\r\n//   [contactAddError]: () => false,\r\n//   [getContactsRequest]: () => true,\r\n//   [getContactsSuccess]: () => false,\r\n//   [getContactsError]: () => false,\r\n//     [contactDeleteRequest]: () => true,\r\n//     [contactDeleteSuccess]: () => false,\r\n//     [contactDeleteError]: () => false,\r\n// });\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport contactsReducer from './Contact/contact-reducer';\r\nimport filterReducer from './Filter/filter-reducer';\r\nimport { loaderReducer } from './Loader/loader-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n  loader: loaderReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport { store };\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const getAllContacts = state => state.contacts;\r\nexport const filterValue = state => state.filter;\r\nexport const getLoader = state => state.loader;\r\n\r\n// С мемоизацией\r\nexport const filterContacts = createSelector(\r\n  [getAllContacts, filterValue],\r\n  (contacts, filter) => {\r\n    const lowerValue = filter.toLowerCase();\r\n    return contacts.filter(({ name }) => {\r\n      return name.toLowerCase().includes(lowerValue);\r\n    });\r\n  },\r\n);\r\n\r\n// Без момеизации\r\n// export const filterContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = filterValue(state);\r\n\r\n//   return contacts.filter(({ name }) => {\r\n//     const lowerValue = filter.toLowerCase();\r\n//     return name.toLowerCase().includes(lowerValue);\r\n//   });\r\n// };\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../Redux/Contact/contact-operation';\r\nimport inLoader from '../Loader/loader';\r\nimport { filterContacts, getLoader } from '../Redux/contacts-selectors';\r\n\r\nfunction RenderContactList({ contacts, deleteContact, loader }) {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {loader ? (\r\n          inLoader()\r\n        ) : contacts.length === 0 ? (\r\n          <h2>No contacts</h2>\r\n        ) : (\r\n          contacts.map(({ id, name, number }) => {\r\n            return (\r\n              <li key={id}>\r\n                {name}: {number}\r\n                <button\r\n                  className=\"item-list\"\r\n                  id={id}\r\n                  type=\"button\"\r\n                  onClick={() => deleteContact(id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            );\r\n          })\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst stateProp = state => ({\r\n  contacts: filterContacts(state),\r\n  loader: getLoader(state),\r\n});\r\n\r\nconst deleteDispatch = dispatch => ({\r\n  deleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(stateProp, deleteDispatch)(RenderContactList);\r\n\r\nRenderContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  filter: PropTypes.string,\r\n};\r\n","import Loader from 'react-loader-spinner';\r\n\r\nexport default function inLoader() {\r\n  return (\r\n    <Loader\r\n      type=\"Puff\"\r\n      color=\"#00BFFF\"\r\n      height={100}\r\n      width={100}\r\n      timeout={3000} //3 secs\r\n    />\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { filterAction } from '../Redux/Filter/filter-action';\r\nimport { filterValue } from '../Redux/contacts-selectors';\r\n\r\nfunction Filter({ filterValue, filter }) {\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        onChange={filterValue}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nconst stateProp = state => ({\r\n  filter: filterValue(state),\r\n});\r\n\r\nconst filterDispatch = dispatch => ({\r\n  filterValue: ({ target }) => dispatch(filterAction(target.value)),\r\n});\r\n\r\nexport default connect(stateProp, filterDispatch)(Filter);\r\n\r\nFilter.propTypes = {\r\n  filterInput: PropTypes.func,\r\n  Filter: PropTypes.string,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport { addContact, getContacts } from '../Redux/Contact/contact-operation';\r\nimport { getAllContacts } from '../Redux/contacts-selectors';\r\n\r\nfunction ContactForm({ contacts, addContact, getContacts }) {\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    number: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    getContacts();\r\n  }, [getContacts]);\r\n\r\n  const checkContact = () => {\r\n    contacts.find(({ name }) => {\r\n      return name === state.name;\r\n    })\r\n      ? alert(`${state.name} is already in contacts.`)\r\n      : newContact();\r\n  };\r\n\r\n  const newContact = () => {\r\n    const { name, number } = state;\r\n    const newObj = { name, number, id: shortid.generate() };\r\n\r\n    addContact(newObj);\r\n  };\r\n\r\n  const formInput = ({ target }) => {\r\n    const { name, value } = target;\r\n    setState({ ...state, [name]: value });\r\n  };\r\n\r\n  const formSubmit = e => {\r\n    e.preventDefault();\r\n    checkContact();\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setState({ name: '', number: '' });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={state.name}\r\n          placeholder=\"Kris Evans\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={formInput}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={state.number}\r\n          placeholder=\"555-55-55\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={formInput}\r\n        />\r\n      </label>\r\n      <button className=\"submit_form\" type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst stateProps = state => ({\r\n  contacts: getAllContacts(state),\r\n});\r\n\r\nconst newContactDispatch = dispatch => ({\r\n  addContact: contact => dispatch(addContact(contact)),\r\n  getContacts: () => dispatch(getContacts()),\r\n});\r\n\r\nexport default connect(stateProps, newContactDispatch)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n","import './App.css';\r\nimport RenderContactList from './components/ContactList/renderContactList';\r\nimport Filter from './components/Filter/filter';\r\nimport ContactForm from './components/ContactForm/contactForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <section>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <RenderContactList />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './components/Redux/store';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}